name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run linting
      working-directory: frontend
      run: npm run lint

    - name: Run type checking
      working-directory: frontend
      run: npm run type-check

    - name: Run tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      working-directory: java-plantuml-server
      run: mvn test

    - name: Run integration tests
      working-directory: java-plantuml-server
      run: mvn verify

    - name: Generate test coverage
      working-directory: java-plantuml-server
      run: mvn jacoco:report

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: java-plantuml-server/target/site/jacoco/jacoco.xml
        flags: backend

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Build Java application
      working-directory: java-plantuml-server
      run: mvn clean package -DskipTests

    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.dev.yml build

    - name: Test Docker containers
      run: |
        docker-compose -f docker-compose.dev.yml up -d
        sleep 30
        
        # Test frontend health
        curl -f http://localhost:5173 || exit 1
        
        # Test backend health
        curl -f http://localhost:8090/api/plantuml/health || exit 1
        
        docker-compose -f docker-compose.dev.yml down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, docker-build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        echo "Preview URL: https://staging.plantuml-editor.com/pr-${{ github.event.number }}"
        
    - name: Comment PR
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Preview deployment ready! \n\n**Frontend**: https://staging.plantuml-editor.com/pr-${{ github.event.number }} \n**Backend**: https://api-staging.plantuml-editor.com/pr-${{ github.event.number }}'
          })

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Build applications
      run: |
        cd frontend && npm ci && npm run build
        cd ../java-plantuml-server && mvn clean package -DskipTests

    - name: Build and push Docker images
      env:
        DOCKER_BUILDKIT: 1
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        
        # Build and tag images
        docker build -t plantuml-editor/frontend:latest ./frontend
        docker build -t plantuml-editor/backend:latest ./java-plantuml-server
        
        # Tag with commit SHA
        docker tag plantuml-editor/frontend:latest plantuml-editor/frontend:${{ github.sha }}
        docker tag plantuml-editor/backend:latest plantuml-editor/backend:${{ github.sha }}
        
        # Push images
        docker push plantuml-editor/frontend:latest
        docker push plantuml-editor/backend:latest
        docker push plantuml-editor/frontend:${{ github.sha }}
        docker push plantuml-editor/backend:${{ github.sha }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## üöÄ What's New
          
          - Auto-generated release from main branch
          - Frontend build: ${{ github.sha }}
          - Backend build: ${{ github.sha }}
          
          ## üê≥ Docker Images
          
          - `plantuml-editor/frontend:${{ github.sha }}`
          - `plantuml-editor/backend:${{ github.sha }}`
          
          ## üì¶ Deployment
          
          ```bash
          docker-compose pull
          docker-compose up -d
          ```
        draft: false
        prerelease: false
